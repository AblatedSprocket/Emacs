* Goals
My primary goal with Emacs is to consolidate the software I use at home. At work, I rely completely on Microsoft's ecosystem and have done what I can to get away from that ecosystem at home. Originally, the intention for my Emacs configuration was to create one environment for all the programming languages I use. As I have familiarized myself with Emacs over the last year and Org mode over the past month or two, I have begun using Emacs for more things. As I explore more uses for Emacs, I will update this section with what I find.
** Email
I currently use mu4e for managing my email in Emacs. The advantage of this is that I can link TODO items to email messages easily, so time-consuming tasks become easier to manage and resume later if I get pulled in a different direction. I have not invested much time in sending email from Emacs yet, but I honestly do not send much personal email to begin with.
** Task Management
Org has been a great tool for managing tasks. I currently use org-agenda and have an app on my phone called Orgzly that I have integrated with. I have trouble with managing tasks in general, and do not use these features as often or as consistently as I want, but when I can motivate myself to use them, they work wonderfully together.
** Prose
I have been trying to get away from Microsoft products and enjoy spending time in Emacs, so I decided to invest more in LaTeX for typesetting and org for more general prose, along with the occasional simple text file. I currently use Auctex for any documents that require typesetting like resumes or formal documents. I added Olivetti into the mix for more creative writing.
** Research
Before now, I did not have a great scheme for organizing information that I needed to refer to occasionally, things like personal documentation and workflows to achieve certain tasks. With Org-Roam, I have begun devising an organizational strategy to compartmentalize information into manageable chunks. The most important feature for me is that if a lot of time has passed since I have attempted the task at hand, backlinks provide easy navigation to other information chunks to provide more context.
* Installation
This installation documentation is for Ubuntu, Debian-based distributions, and other distributions that use apt. There may or may not be some differences in the libraries provided by other package managers. For Emacs to pick up the configuration provided, it must be placed in =~/.config/emacs/= if using Emacs 27 or newer. Where my limited elisp abilities allow, I made the config be agnostic between Emacs 26- and Emacs 27+. There were some places I didn't know how to do this, so the config needs some modification to work with Emacs 26. Just a simple =rg-literal= search through the repo for =~/.config/emacs= and replacing it with =~/.emacs.d/=. 

The process used here to install Emacs 27 is slightly different. Again, download the [source code](http://git.savannah.gnu.org/cgit/emacs.git) and untar it with =tar -xzvf emacs-27.1.tar.gz=. That said, the install packages might need revising on a new installation. Here goes. First install the dependencies: =sudo apt install libgtk-3-dev libwebkit2gtk-4.0-dev libpng-dev libgif-dev libotf-dev libxml2-dev libxpm-dev libjpeg-dev librsvg2-dev libtiff-dev libgnutls28-dev libncurses5-dev texinfo auctex fonts-inconsolata fonts-sil-gentium autoconf ripgrep mu4e isync html2text gnupg2 python3-pip python3-venv sqlite3 postgresql graphviz=. Most of the dependencies I can remember my motivation for installing: =libgtk-3-dev=, and =libwebkit2gtk-4.o-dev= are for xwidget support that I wanted for viewing email in a web browser. It doesn't work particularly well, but xwidget support might also be useful for previewing LaTeX documents. I think =libncurses5-dev= is also for xwebkit support. Everything referencing a file extension just provides support for Emacs GUI to render that file type. For the most part, I only wanted support for all of those file extensions because emails have all sorts of things that I wanted to be able to view. The last dependency, =autoconf= is required for running =autogen.sh=. Run =./autogen.sh= from within the source directory to create the configuration script, then run that using =./configure --with-json --with-modules --with-xwidgets --with-rsvg --without-pop= to use the new native JSON parsing and better terminal support with vterm. According to the documentation, --with-json should not be necessary, but I added it for good measure. Once complete, run =sudo make && sudo make install= to get everything installed.

On first install, it may be necessary to call =package-refresh-contents= and =package-initialize= to get everything to install properly. It may not be necessary, just something to be aware of.

With everything installed, I suggest moving to [[file:config.org][config.org]] for details on how everything is configured.
