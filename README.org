* Goals

My primary goal with Emacs is to consolidate the software I use at home. At work, I rely completely on Microsoft's ecosystem and have done what I can to get away from that ecosystem at home. Originally, the intention for my Emacs configuration was to create one environment for all the programming languages I use. As I have familiarized myself with Emacs over the last year and Org mode over the past month or two, I have begun using Emacs for more things. If you're curious about how I'm using emacs, I suggest looking at my =config.org= file. It's broken down by workflow, and each workflow is broken down into the packages that comprise it. My =init.el= file provides the capability to toggle each package on or off based on its =TODO= state. I have two primary reasons for organizing my configuration this way. The first is that, occasionally, when I want to add a new package into my configuration, the package doesn't work as advertised and sometimes it's because of a problem with my setup. Making packages toggle-able makes it easier to debug these issues. The second reason is that I get a strong satisfaction from cleaning out my setup every once in a while. If I want to know what my life would be like without a certain package, being able to toggle my configuration for that package makes this process much easier.

* Installation

This installation documentation is for Emacs 27 on Ubuntu, Debian-based distributions, and other distributions that use apt. There may or may not be some differences in the libraries provided by other package managers. For Emacs to pick up the configuration provided, it should be placed in =~/.config/emacs/=.

Download the [[http://git.savannah.gnu.org/cgit/emacs.git][source code]] and untar it with =tar -xzvf emacs-27.1.tar.gz=. The following command is mostly for me, installing all dependencies for my config in one go. If you want to do things piece-meal, each package section has an install script for its own dependencies. Here's the complete dependency installation script:

#+BEGIN_SRC shell
sudo apt install auctex autoconf fonts-hack fonts-inconsolata fonts-sil-gentium gnupg2 graphviz isync libgif-dev libgnutls28-dev libgtk-3-dev libjpeg-dev libncurses5-dev libotf-dev libpng-dev librsvg2-dev libtiff-dev libxml2-dev libxpm-dev mu4e postgresql python3-pip python3-venv ripgrep sqlite3 texinfo
#+END_SRC

And here are the minimum requirements for the piece-meal approach:

#+BEGIN_SRC shell
sudo apt install autoconf libgif-dev libgnutls28-dev libgtk-3-dev libjpeg-dev libncurses5-dev libotf-dev libpng-dev librsvg2-dev libtiff-dev libxml2-dev libxpm-dev
#+END_SRC

For my own sake, I alphabetized the dependencies, I've tabulated their purpose for posterity so I can remember what's going on:

| Package           | Function                                                                      |
|-------------------+-------------------------------------------------------------------------------|
| autoconf          | Building from source                                                          |
| fonts-hack        | Adds hack font, maybe my favorite monospace option                            |
| fonts-inconsolata | Adds inconsolata font, my second favorite monospace option                    |
| fonts-sil-gentium | My favorite serif font so far                                                 |
| gnupg2            | I use this in my Mu4e config and Gnus Authinfo for managing logins for things |
| graphviz          | Provides neat visualization of org-roam trees                                 |
| isync             | Provides mbsync as Mu4e mail synchronization application                      |
| libgif-dev        | GIF file support                                                              |
| libgnutls28-dev   | Suggested during the configure step, seemed legit                             |
| libgtk-3-dev      | Suggested for prividing display support, seemed legit                         |
| libjpeg-dev       | JPG file support                                                              |
| libncurses5-dev   | Suggested during the configure step, seemed legit                             |
| libotf-dev        | OTF file support                                                              |
| libpng-dev        | PNG file support                                                              |
| librsvg2-dev      | SVG file support                                                              |
| libtiff-dev       | TIFF file support                                                             |
| libxml2-dev       | XML file support                                                              |
| libxpm-dev        | XPM file support                                                              |
| mu4e              | Mail client                                                                   |
| postgresql        | RDBMS (Used to SQL server, felt like I needed an alternative)                 |
| python3-pip       | Python package manager                                                        |
| python3-venv      | Python virtual environment system                                             |
| ripgrep           | grep alternative                                                              |
| sqlite3           | SQLite RDBMS                                                                  |
| texinfo           | Suggested for doc support (I think) during the configure step, seemed legit   |

Once all of that is installed, it's time to configure and install Emacs! Navigate to the directory of the unzipped source code and enter the following to get the configuration files ready for the install:

#+BEGIN_SRC shell
  ./autogen.sh
  ./configure --with-json --with-modules --with-rsvg --without-pop
#+END_SRC

Sometimes, =./configure= suggests more packages to install. I don't really know any better so I typically look up the application it wants (I've found deb packages often don't quite match the apps) and install it. Anyway, once that's all done, it's install time:

#+BEGIN_SRC shell
  sudo make && sudo make install
#+END_SRC

On first install, try running =package-refresh-contents= and =package-initialize= within Emacs if you encounter errors. This has fixed things for me in the past.

With everything installed, I suggest moving to [[file:config.org][config.org]] for details on how everything is configured. Unless you want Emacs to run as a daemon on startup. In that case, keep reading!

* Daemon

When installing from source, it appears that the =emacs.service= file does not always get created properly, so starting an Emacs server (i.e. running Emacs as a daemon) by executing =systemctl --user enable emacs= does not work. You can check by running =systemctl status --user emacs=. The command will tell you where the service file is located. I created my own systemd entry in =~/.config/systemd/user/emacs.service= as described [https://www.emacswiki.org/emacs/EmacsAsDaemon][here]. If the service file exists, just make sure it looks like this:

#+BEGIN_EXAMPLE
[Unit]
Description=Emacs texteditor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/local/bin/emacs --daemon
ExecStop=/usr/local/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
#+END_EXAMPLE

To run an Emacs client, either run:

#+BEGIN_SRC shell :padline no
emacsclient -create-frame --alternate-editor=""
#+END_SRC

Or, create a Desktop entry in =~/.local/share/applications/emacsclient.desktop=:

#+BEGIN_EXAMPLE
[Desktop Entry]
Name = Emacs Client
GenericName=Text Editor
Comment=Emacs Editor
MimeType=text/english;text/plain
Exec=emacsclient -create-frame --alternate-editor=""
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupWMClass=Emacs
#+END_EXAMPLE


* Notes
Anything in the =lisp= directory isn't mine. Org-Gantt is currently maintained [[https://gitlab.com/joukeHijlkema/org-gantt/][here]]. I just have some minor changes to make it render more nicely for me. Ejira is currently maintained [[https://github.com/nyyManni/ejira/blob/master/ejira-core.el][here]], waiting for it to get to MELPA.
